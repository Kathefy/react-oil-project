{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","Link","to","Component","Header","HeaderChart","App_Navigation","Watch","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","btnclickPrev","classList","currentSlide","state","length","setState","btnclickNext","console","log","date","Date","endDate","_this2","timer","setInterval","slider","clearInterval","daysBetween","date1","date2","date1Ms","getTime","differenceMs","Math","round","monthsBetween","elements","div0","getFullYear","div1","div2","onClick","map","item","index","key","concat","Footer","Sectors","_this3","countryChange","e","table","toConsumableArray","sectorsListChecked","newTableyear","years","itemOne","push","data","filter","element","year","target","value","indexOf","region","forEach","sector","resultFilter","number","chartSectorData","sectorChange","deleteSector","splice","regions","sectors","_this4","fetch","then","resp","ok","json","Error","oil","catch","err","_this5","onChange","type","index_esm","width","height","chartType","loader","options","chart","title","subtitle","rootProps","data-testid","Regions","_this6","countriesListChecked","deleteCountry","chartRegionData","_this7","_this8","FooterCharts","ChooseChart","Main","react","App_Header","App_Watch","App_Footer","NotFound","App_HeaderChart","ChartSector","App_Sectors","App_FooterCharts","ChartRegion","App_Regions","App","HashRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d09b487.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport \"./App.scss\";\nimport { HashRouter, Route, Link, Switch, NavLink } from \"react-router-dom\";\nimport { Chart } from \"react-google-charts\";\n\nclass Navigation extends Component {\n  render() {\n    return (\n      <div className=\"main-page\">\n        <Link to=\"/\">Strona Główna</Link>\n      </div>\n    );\n  }\n}\nclass Header extends Component {\n  render() {\n    return (\n      <header className=\"page-header\">\n        <div className=\"container\">\n          <div className=\"header\">\n            <h1>Popyt na ropę naftową</h1>\n            <p>\n              Popyt na ropę naftową rośnie codzienne. Uużywamy więcej ropy, niż\n              odkrywamy, sięgamy po coraz trudniej dostępne zasoby. Ale na jak\n              długo w tej sytuacji wystarczy nam ropy? I co będzie jak się\n              skończy?...\n            </p>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\nclass HeaderChart extends Component {\n  render() {\n    return (\n      <header className=\"page-header\">\n        <div className=\"container\">\n          <Navigation />\n          <div className=\"header\">\n            <h1>Popyt na ropę naftową</h1>\n            <p>\n              Popyt na ropę naftową rośnie codzienne. Uużywamy więcej ropy, niż\n              odkrywamy, sięgamy po coraz trudniej dostępne zasoby. Ale na jak\n              długo w tej sytuacji wystarczy nam ropy? I co będzie jak się\n              skończy?...\n            </p>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\nclass Watch extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      endDate: new Date(this.props.endDate),\n      currentSlide: 0,\n      classList: [\n        \"banner-slide banner-slide-active\",\n        \"banner-slide\",\n        \"banner-slide\"\n      ]\n    };\n  }\n  componentDidMount() {\n    this.timer = setInterval(() => {\n      this.setState({\n        date: new Date()\n      });\n    }, 1000);\n    this.slider = setInterval(() => {\n      this.btnclickNext();\n    }, 3000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.timer);\n    clearInterval(this.slider);\n  }\n  btnclickPrev = () => {\n    let active = \"banner-slide banner-slide-active\";\n    let classList = [\"banner-slide\", \"banner-slide\", \"banner-slide\"];\n    let currentSlide = this.state.currentSlide;\n    if (currentSlide === 0) {\n      currentSlide = classList.length - 1;\n    } else {\n      currentSlide = currentSlide - 1;\n    }\n    classList[currentSlide] = active;\n    this.setState({\n      currentSlide: currentSlide,\n      classList: classList\n    });\n  };\n  btnclickNext = () => {\n    let active = \"banner-slide banner-slide-active\";\n    let classList = [\"banner-slide\", \"banner-slide\", \"banner-slide\"];\n    let currentSlide = this.state.currentSlide;\n    if (currentSlide === classList.length - 1) {\n      currentSlide = 0;\n    } else {\n      currentSlide = currentSlide + 1;\n    }\n    classList[currentSlide] = active;\n    this.setState({\n      currentSlide: currentSlide,\n      classList: classList\n    });\n    console.log(\"hello\");\n  };\n  render() {\n    Date.daysBetween = function(date1, date2) {\n      //Get 1 day in milliseconds\n      const oneDay = 1000 * 60 * 60 * 24;\n      // Convert both dates to milliseconds\n      const date1Ms = date1.getTime();\n      const date2Ms = date2.getTime();\n      // Calculate the difference in milliseconds\n      var differenceMs = date2Ms - date1Ms;\n      // Convert back to days and return\n      return Math.round(differenceMs / oneDay);\n    };\n    Date.monthsBetween = function(date1, date2) {\n      const oneMonth = 1000 * 60 * 60 * 24 * 30;\n      const date1Ms = date1.getTime();\n      const date2Ms = date2.getTime();\n      var differenceMs = date2Ms - date1Ms;\n      return Math.round(differenceMs / oneMonth);\n    };\n    const elements = {\n      div0:\n        this.state.endDate.getFullYear() -\n        this.state.date.getFullYear() +\n        \" lat\",\n      div1:\n        Date.monthsBetween(this.state.date, this.state.endDate) + \" miesięcy\",\n      div2: Date.daysBetween(this.state.date, this.state.endDate) + \" dni\"\n    };\n    return (\n      <div className=\"main-banner\">\n        <div className=\"container\">\n          <div className=\"banner\">\n            <button className=\"banner-prev\" onClick={this.btnclickPrev}>\n              <i className=\"fa fa-angle-left\" />\n            </button>\n            <button className=\"banner-next\" onClick={this.btnclickNext}>\n              <i className=\"fa fa-angle-right\" />\n            </button>\n            <div className=\"banner-slides\">\n              {this.state.classList.map((item, index) => {\n                return (\n                  <div key={index} className={item}>\n                    <p>\n                      Światowe rezerwy ropy naftowey wynoszą{\" \"}\n                      <span>1696.6 tys mln baryłek</span>\n                    </p>\n                    <p>\n                      Biorąc pod uwagę dzienne uzycie ropy naftowey tych\n                      rezerwów wystarczy na:\n                    </p>\n                    <div className=\"slider-number\">\n                      {elements[`div${index}`]}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            {/* <p>\n              Źródło: Obliczenia własne na podstawie danych statystycznych BP\n              Statistical Review of World Energy 2018\n            </p> */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nclass Footer extends Component {\n  render() {\n    return (\n      <div className=\"footer\">\n        <div className=\"container\">\n          <div className=\"row-footer\">\n            <div className=\"footer-text\">Dowiedz się więcej</div>\n            <Link to=\"/charts\">Kliknij tutaj</Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Sectors extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sectorsListChecked: [],\n      data: [],\n      regions: [],\n      sectors: [],\n      years: [],\n      value: \"World\",\n      chartSectorData: []\n    };\n  }\n  countryChange = e => {\n    const table = [\"Year\", ...this.state.sectorsListChecked];\n    const newTableyear = this.state.years.map((item, index) => {\n      let itemOne = [];\n      itemOne.push(item);\n\n      const data = this.state.data\n        .filter(element => element.year === item)\n        .filter(element => e.target.value.indexOf(element.region) > -1);\n\n      this.state.sectorsListChecked.forEach(sector => {\n        let resultFilter = data.filter(element => element.sector === sector);\n        itemOne.push(resultFilter[0].number);\n      });\n\n      return itemOne;\n    });\n    const chartSectorData = [table, ...newTableyear];\n    this.setState({\n      value: e.target.value,\n      chartSectorData: chartSectorData\n    });\n  };\n  sectorChange = (e, index) => {\n    let sectorsListChecked = this.state.sectorsListChecked;\n    if (sectorsListChecked.indexOf(e.target.value) === -1) {\n      sectorsListChecked.push(e.target.value);\n    } else {\n      let deleteSector = sectorsListChecked.indexOf(e.target.value);\n      sectorsListChecked.splice(deleteSector, 1);\n    }\n    //console.log(sectorsListChecked);\n    //Create data for the graphic\n    const table = [\"Year\", ...sectorsListChecked];\n    const newTableyear = this.state.years.map((item, index) => {\n      let itemOne = [];\n      itemOne.push(item);\n\n      const data = this.state.data\n        .filter(element => element.year === item)\n        .filter(element => this.state.value.indexOf(element.region) > -1);\n\n      sectorsListChecked.forEach(sector => {\n        let resultFilter = data.filter(element => element.sector === sector);\n        itemOne.push(resultFilter[0].number);\n      });\n\n      return itemOne;\n    });\n    const chartSectorData = [table, ...newTableyear];\n    console.log(chartSectorData);\n    this.setState({\n      sectorsListChecked: sectorsListChecked,\n      chartSectorData: chartSectorData\n    });\n  };\n  // Pobieramy dane z serwera\n  componentDidMount() {\n    fetch(\"db.json\")\n      .then(resp => {\n        if (resp.ok) return resp.json();\n        else throw new Error(\"Błąd sieci!\");\n      })\n      .then(data => {\n        console.log(\"Info:\", data);\n        // Create the list of sectors and regions\n        let sectors = [];\n        let regions = [];\n        let years = [];\n        data.oil.forEach(function(element) {\n          if (sectors.indexOf(element.sector) === -1) {\n            sectors.push(element.sector);\n          }\n          if (regions.indexOf(element.region) === -1) {\n            regions.push(element.region);\n          }\n          if (years.indexOf(element.year) === -1) {\n            years.push(element.year);\n          }\n        });\n        console.log(sectors);\n        console.log(regions);\n        console.log(years);\n\n        this.setState({\n          data: data.oil,\n          sectors: sectors,\n          regions: regions,\n          years: years\n        });\n      })\n      .catch(err => {\n        console.log(\"Błąd!\", err);\n      });\n  }\n  render() {\n    return (\n      <div className=\"sectors\">\n        <div className=\"container sectors-forms\">\n          <div className=\"forms\">\n            <form>\n              <fieldset>\n                <legend>Wybierz region:</legend>\n                <select value={this.state.value} onChange={this.countryChange}>\n                  {this.state.regions.map((item, index) => {\n                    return (\n                      <option key={index} value={item}>\n                        {item}\n                      </option>\n                    );\n                  })}\n                </select>\n              </fieldset>\n            </form>\n            <form>\n              <fieldset>\n                <legend>Wybierz sektor:</legend>\n                {this.state.sectors.map((item, index) => {\n                  return (\n                    <label key={index}>\n                      <input\n                        type=\"checkbox\"\n                        value={item}\n                        onChange={e => this.sectorChange(e, index)}\n                        // checked={this.state.sectorsChecked[index]}\n                      />\n                      {item}\n                    </label>\n                  );\n                })}\n              </fieldset>\n            </form>\n          </div>\n          <div className=\"chart\">\n            <Chart\n              width={\"600px\"}\n              height={\"400px\"}\n              chartType=\"Line\"\n              loader={<div>Loading Chart</div>}\n              data={this.state.chartSectorData}\n              options={{\n                chart: {\n                  title: `Popyt na ropę naftową, region: ${\n                    this.state.value\n                  }, sektory: ${this.state.sectorsListChecked}`,\n                  subtitle: \"Milion baryłek dzienne\"\n                }\n              }}\n              rootProps={{ \"data-testid\": \"3\" }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nclass Regions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countriesListChecked: [],\n      data: [],\n      regions: [],\n      sectors: [],\n      years: [],\n      value: \"Road transportation\",\n      chartRegionData: []\n    };\n  }\n  countryChange = (e, index) => {\n    let countriesListChecked = this.state.countriesListChecked;\n    if (countriesListChecked.indexOf(e.target.value) === -1) {\n      countriesListChecked.push(e.target.value);\n    } else {\n      let deleteCountry = countriesListChecked.indexOf(e.target.value);\n      countriesListChecked.splice(deleteCountry, 1);\n    }\n    const table = [\"Year\", ...countriesListChecked];\n    const newTableyear = this.state.years.map((item, index) => {\n      let itemOne = [];\n      itemOne.push(item);\n\n      const data = this.state.data\n        .filter(element => element.year === item)\n        .filter(element => this.state.value.indexOf(element.sector) > -1);\n      countriesListChecked.forEach(region => {\n        let resultFilter = data.filter(element => element.region === region);\n        itemOne.push(resultFilter[0].number);\n      });\n\n      return itemOne;\n    });\n    const chartRegionData = [table, ...newTableyear];\n    console.log(chartRegionData);\n    this.setState({\n      countriesListChecked: countriesListChecked,\n      chartRegionData: chartRegionData\n    });\n  };\n  sectorChange = e => {\n    const table = [\"Year\", ...this.state.countriesListChecked];\n    const newTableyear = this.state.years.map((item, index) => {\n      let itemOne = [];\n      itemOne.push(item);\n\n      const data = this.state.data\n        .filter(element => element.year === item)\n        .filter(element => e.target.value.indexOf(element.sector) > -1);\n      this.state.countriesListChecked.forEach(region => {\n        let resultFilter = data.filter(element => element.region === region);\n        itemOne.push(resultFilter[0].number);\n      });\n\n      return itemOne;\n    });\n    const chartRegionData = [table, ...newTableyear];\n    console.log(chartRegionData);\n    this.setState({\n      value: e.target.value,\n      chartRegionData: chartRegionData\n    });\n  };\n  // Pobieramy dane z serwera\n  componentDidMount() {\n    fetch(\"db.json\")\n      .then(resp => {\n        if (resp.ok) return resp.json();\n        else throw new Error(\"Błąd sieci!\");\n      })\n      .then(data => {\n        console.log(\"Info:\", data);\n        // Create the list of sectors and regions\n        let sectors = [];\n        let regions = [];\n        let years = [];\n        data.oil.forEach(function(element) {\n          if (sectors.indexOf(element.sector) === -1) {\n            sectors.push(element.sector);\n          }\n          if (regions.indexOf(element.region) === -1) {\n            regions.push(element.region);\n          }\n          if (years.indexOf(element.year) === -1) {\n            years.push(element.year);\n          }\n        });\n        console.log(sectors);\n        console.log(regions);\n        console.log(years);\n        this.setState({\n          data: data.oil,\n          sectors: sectors,\n          regions: regions,\n          years: years\n        });\n      })\n      .catch(err => {\n        console.log(\"Błąd!\", err);\n      });\n  }\n  render() {\n    return (\n      <div className=\"sectors\">\n        <div className=\"container sectors-forms\">\n          <div className=\"forms\">\n            <form>\n              <fieldset>\n                <legend>Wybierz sektor:</legend>\n                <select value={this.state.value} onChange={this.sectorChange}>\n                  {this.state.sectors.map((item, index) => {\n                    return (\n                      <option key={index} value={item}>\n                        {item}\n                      </option>\n                    );\n                  })}\n                </select>\n              </fieldset>\n            </form>\n            <form>\n              <fieldset>\n                <legend>Wybierz region:</legend>\n                {this.state.regions.map((item, index) => {\n                  return (\n                    <label key={index}>\n                      <input\n                        type=\"checkbox\"\n                        value={item}\n                        onChange={e => this.countryChange(e, index)}\n                        // checked={this.state.countriesChecked[index]}\n                      />\n                      {item}\n                    </label>\n                  );\n                })}\n              </fieldset>\n            </form>\n          </div>\n          <div className=\"chart\">\n            <Chart\n              width={\"600px\"}\n              height={\"400px\"}\n              chartType=\"Line\"\n              loader={<div>Loading Chart</div>}\n              data={this.state.chartRegionData}\n              options={{\n                chart: {\n                  title: `Popyt na ropę naftową, kraje: ${\n                    this.state.countriesListChecked\n                  }, sektory: ${this.state.value}`,\n                  subtitle: \"Milion baryłek dzienne\"\n                }\n              }}\n              rootProps={{ \"data-testid\": \"3\" }}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nclass FooterCharts extends Component {\n  render() {\n    return (\n      <div className=\"footer-chart\">\n        <div className=\"container\">\n          <p>*Na podstawie danych statystycznych OPEC World Oil Outlook 2018</p>\n        </div>\n      </div>\n    );\n  }\n}\nclass ChooseChart extends Component {\n  render() {\n    return (\n      <div className=\"choose-chart-main\">\n        <div className=\"container\">\n          <Navigation />\n          <div className=\"choose-chart\">\n            <div className=\"choose-chart-text\">Wybierz wykres</div>\n            <div className=\"choose-chart-links\">\n              <Link to=\"/sector\">Sektor</Link>\n              <Link to=\"/region\">Region</Link>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nclass Main extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Header />\n        <Watch endDate=\"March 12, 2068\" />\n        <Footer />\n      </Fragment>\n    );\n  }\n}\n\nclass NotFound extends Component {\n  render() {\n    return <HeaderChart />;\n  }\n}\nclass ChartSector extends Component {\n  render() {\n    return (\n      <Fragment>\n        <HeaderChart />\n        <Sectors />\n        <FooterCharts />\n      </Fragment>\n    );\n  }\n}\nclass ChartRegion extends Component {\n  render() {\n    return (\n      <Fragment>\n        <HeaderChart />\n        <Regions />\n        <FooterCharts />\n      </Fragment>\n    );\n  }\n}\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <div>\n          <Switch>\n            <Route exact path=\"/\" component={Main} />\n            <Route path=\"/charts\" component={ChooseChart} />\n            <Route path=\"/sector\" component={ChartSector} />\n            <Route path=\"/region\" component={ChartRegion} />\n            <Route path=\"*\" component={NotFound} />\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}